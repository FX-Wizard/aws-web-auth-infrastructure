  EC2ManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          def handler(event, context):
              ec2 = boto3.client('ec2')
              instance_id = os.environ['INSTANCE_ID']
              trigger_source = event.get('triggerSource', '')
              
              if trigger_source == 'PostAuthentication_Authentication':
                  # User logged in - start instance
                  print(f"Starting instance {instance_id}")
                  ec2.start_instances(InstanceIds=[instance_id])
                  return {
                      'statusCode': 200,
                      'body': f'Started instance {instance_id}'
                  }
              elif trigger_source == 'TokenGeneration_Authentication':
                  # Check if this is a sign-out event
                  if event.get('request', {}).get('signOutEvent', False):
                      print(f"Stopping instance {instance_id}")
                      ec2.stop_instances(InstanceIds=[instance_id])
                      return {
                          'statusCode': 200,
                          'body': f'Stopped instance {instance_id}'
                      }
              
              return {
                  'statusCode': 200,
                  'body': 'No action taken'
              }
      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          INSTANCE_ID: !Ref TargetEC2InstanceId
      Tags:
        - Key: Purpose
          Value: EC2-Management

Parameters:
  # Add this to your existing parameters
  TargetEC2InstanceId:
    Type: String
    Description: ID of the EC2 instance to manage
